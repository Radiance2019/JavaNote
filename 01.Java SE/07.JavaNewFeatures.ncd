<!DOCTYPE NoteCase-File>
<!--LastNote:3-->
<HTML>
<HEAD>
<meta content="text/html;charset=UTF-8" http-equiv="Content-Type">
<meta name="generator" content="NoteCase 1.9.8">
<TITLE></TITLE>
</HEAD>
<BODY>
<DL>
<DT>1. Java8</DT>
<!--property:date_created=1579072813-->
<!--property:date_modified=1579078478-->
<DD>
1. 接口的静态方法、默认方法<BR>
	<BR>
	1）接口的静态方法只能由接口调用<BR>
	2）接口的默认方法只能由接口实现类的对象调用<BR>
	<BR>
2. 时间API<BR>
<BR>
	Java8的时间API在java.util.time包下，常用类包括：<BR>
	LocalDate、LocalTime、LocalDateTime、Instant、Period、Duration<BR>
	<BR>
3. Lambda表达式<BR>
<BR>
	适用于函数式接口的匿名实现，本质为函数<BR>
	实现方式：(形参列表）-&gt; 方法体<BR>
	<BR>
4. 函数式接口<BR>
<BR>
	只含有一个抽象方法的接口。常用函数式接口包括：<BR>
	1）Consumer&lt;T&gt;	T	void		void accept(T t)<BR>
	2）Supplier&lt;T&gt;		无	T		T get()<BR>
	3）Function&lt;T,R&gt;	T	R		R apply(T t)<BR>
	4）Predicate&lt;T&gt;	T	boolean	boolean test(T t)<BR>
	<BR>
5. 方法引用<BR>
<BR>
	方法引用的本质为调用对应类或对象已经封装好的特定方法<BR>
	实现方式包括：<BR>
	1）对象::实例方法<BR>
	2）类::静态方法<BR>
	3）类::实例方法（包含两个参数，通过第一个参数调用方法，方法的参数为第二个参数）<BR>
	<BR>
6. 构造器引用/数组引用<BR>
<BR>
	1）构造器引用：类::new<BR>
	2）数组引用：String[]::new<BR>
	<BR>
7. streamAPI<BR>
<BR>
	stream也是一种容器，其更关注运算，主要使用的硬件资源为CPU；而集合主要使用的硬件资源为内存<BR>
	streamAPI的特点：①不存储元素 ②不改变源对象 ③延迟执行<BR>
	1）创建：①通过集合，调用集合（接口）的默认方法：list.stream()、list.parellelStream()<BR>
		      ②通过数组（类）的静态方法：Arrays.stream(arr)<BR>
		      ③Stream.of()方法<BR>
		      ④创建无限流----迭代：Stream.iterate(0, t-&gt;t+2)<BR>
					----生成：Stream.generate(Math::random)<BR>
	2）中间操作：<BR>
		①筛选与切片----filter(Predicate p)：过滤<BR>
				  ----limit(n)：取前n个<BR>
				  ----skip(n)：跳过前n个<BR>
				  ----distinct()：去重<BR>
		②映射----map(Function f)：不会打开集合中的集合（相当于add）<BR>
			 ----flatmap(Function f)：逐个值映射（相当于addAll）<BR>
		③排序----sorted()：自然排序<BR>
			 ----sorted(Compatator com)：定制排序<BR>
	3）终止操作：<BR>
		①匹配与查找----allMatch(Predicate p)：是否匹配所有<BR>
				  ----noneMatch(Predicate p)：是否没有匹配<BR>
				  ----findFirst()：返回第一个元素<BR>
				  ----findAny()：返回当前流中任意元素（串行流通常返回第一个，并行流返回任意一个）<BR>
				  ----count()：返回流中元素的总个数<BR>
				  ----max(Comparator c)：返回流中最大值<BR>
				  ----min(Comparator c)：返回流中最小值<BR>
				  ----foreach()：内部迭代<BR>
		②归约----reduce(T identity, BinaryOperator)：可以将流中元素反复结合起来，得到一个值，返回T<BR>
			 ----reduce(BinaryOperator)：返回Optional&lt;T&gt;<BR>
		③收集----collect(Collector c)：Collector接口中定义对流执行收集的操作，stream.collect(Collectors.toList())<BR>
		<BR>
8. Optional类<BR>
<BR>
	Optional类是一个容器，主要用来避免空指针异常<BR>
	<BR>
	1）创建Optional类<BR>
		①Optional.of(T t)：t非空<BR>
		②Optional.empty()：创建一个空的Optional实例<BR>
		③Optional.ofNullable(T t)：t可以为null<BR>
		<BR>
	2）判断容器中是否包含对象<BR>
		①boolean isPresent()：判断是否包含对象<BR>
		②void ifPresent(Consumer&lt;? super T&gt; consumer)：如果有值，就执行Consumer接口的实现，该值作为参数传递<BR>
		<BR>
	3）获取对象：<BR>
		①T get()：如果包含值则返回，否则抛异常<BR>
		②T orElse(T other)：如果有值则将其返回，否则返回指定的other对象<BR>
		③T orElseGet)(Supplier&lt;? extends T&gt; other)：有值返回，否则返回由Supplier接口实现提供的对象<BR>
		④T orElseThrow(Supplier&lt;? extends X&gt; exceptionSupplier)：如果有值返回，否则抛由Supplier接口实现提供的异常<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
		<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
	<BR>
<BR>
<BR>
<BR>
<BR>
		
</DD>
<DT>2. Java9</DT>
<!--property:date_created=1579078512-->
<!--property:date_modified=1579081918-->
<DD>
1. 目录结构改变：无jre目录<BR>
<BR>
2. 模块化系统<BR>
<BR>
	在module-info中，对外暴露的包用export声明，引入的用require声明<BR>
	<BR>
3. Java的REPL工具：jshell<BR>
<BR>
4. 接口可以有私有方法<BR>
<BR>
5. 钻石操作符升级：匿名实现类也可以进行类型推断<BR>
<BR>
6. try语句<BR>
<BR>
	1）Java8可以将需要关闭的资源在try语句中声明并初始化，实现自动关闭<BR>
	2）Java9使需要关闭的资源可以在外部声明并初始化<BR>
	<BR>
7. String存储结构变更<BR>
<BR>
	以前是字符数组(char[])，现在为字节数组(Byte[])，因为大部分为拉丁字符可以用一个字节来表示<BR>
	<BR>
8. 集合工厂方法：快速创建只读集合<BR>
<BR>
	Collections.unmodifiableList(list)、Arrays.asList(...)、List.of(...)<BR>
	<BR>
9. InputStream加强<BR>
<BR>
	transferTo方法：直接将输入流转化为输出流<BR>
	<BR>
10. 增强的streamAPI<BR>
<BR>
	1）takeWhile(Predicate p)：返回从开头开始的尽量多的元素<BR>
	2）dropWhile(Predicate p)：与takewhile相反，返回剩余的元素<BR>
	3）Java8中的stream不能完全为null，但可以包含null；Java9中的ofNullable只包含一个元素，可以为null<BR>
	4）iterate(0, x-&gt;x&lt;100, x-&gt;x+1)：重载的iterate方法，自定义终止条件<BR>
	<BR>
11. Optional的stream方法<BR>
<BR>
	Optional也是一个容器，提供了stream方法<BR>
	<BR>
12. JS引擎升级：Nashorn
</DD>
<DT>3. Java10</DT>
<!--property:date_created=1579081932-->
<!--property:date_modified=1579083708-->
<DD>
1. 局部变量的类型推断<BR>
<BR>
	1）使用var声明变量，根据所赋的值，推断变量的类型，然后将该类型写入字节码文件中<BR>
	2）使用var声明变量时必须赋值<BR>
	3）lambda表达式中左边的函数式接口不能声明为var（方法引用同理）<BR>
	4）var不是一个关键字<BR>
	<BR>
2. 集合新增创建不可变集合的方法<BR>
<BR>
	新增了集合的copyOf()方法：<BR>
		<BR>
		var list1 = List.of(1,2,3);<BR>
		var copy1 = List.copy.Of(list1);<BR>
		System.out.println(list1==copy1);//true<BR>
		<BR>
		var list2 = new ArrayList&lt;String&gt;();<BR>
		var copy2 = List.copyOf(list2);<BR>
		System.out.println(list2==copy2);//false<BR>
		<BR>
		如果copyof的参数本身是一个只读集合，返回当前集合；如果参数不是只读集合，返回一个新的只读集合
</DD>
<DT>4. Java11</DT>
<!--property:date_created=1579083719-->
<!--property:date_modified=1579085289-->
<DD>
1. 新增字符串处理方法<BR>
<BR>
	1）isBlank()：是否为空白<BR>
	2）strip()：去除首尾空白（跟trim相比能判断Unicode的空白字符）<BR>
	3）stripTrailing()：去除尾部空白<BR>
	4）stripLading()：去除首部空白<BR>
	4）repeat(int n)：重复n次<BR>
	5）lines.count()：计算有多少行<BR>
	<BR>
2. 全新的HTTP Client API<BR>
<BR>
3. ZGC<BR>
<BR>
	是一个并发、给予region、压缩性的垃圾收集器，只有root扫描阶段会STW，因此GC停顿时间不会随堆增长和存货对象的增长而变长<BR>
	暂停时间不会超过10ms<BR>
	<BR>
<BR>
	
</DD>
</DL>
</BODY>
</HTML>
