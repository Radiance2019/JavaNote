<!DOCTYPE NoteCase-File>
<!--LastNote:3-->
<HTML>
<HEAD>
<meta content="text/html;charset=UTF-8" http-equiv="Content-Type">
<meta name="generator" content="NoteCase 1.9.8">
<TITLE></TITLE>
</HEAD>
<BODY>
<DL>
<DT>SpringMVCnote</DT>
<!--property:date_created=1550624549-->
<!--property:date_modified=1550624549-->
<!--property:expanded-->
<DD>
<DL>
<DT>1. HelloWorld</DT>
<!--property:date_created=1550624850-->
<!--property:date_modified=1550640022-->
<DD>
1. 在webxml中配置dispatchrservlet<BR>
<BR>
2. 加入springMVC配置文件<BR>
<BR>
3. 编写请求处理器，并表示为处理器<BR>
<BR>
4. 编写视图
</DD>
<DT>2. REST风格</DT>
<!--property:date_created=1550640028-->
<!--property:date_modified=1550744689-->
<DD>
1. REST概念<BR>
<BR>
	即representational state transfer，（资源）表现层状态转化<BR>
	<BR>
	1）资源：网络上的一个实体，或者说是网络上的一个具体信息。每种资源对应一个特定的URI，即为每个资源独一无二的识别符<BR>
	<BR>
	2）表现层：把资源具体呈现出来的形式叫做表现层。例如文本的表现形式有txt、HTML等<BR>
	<BR>
	3）状态转化：每发出一个请求，就代表了客户端和服务器的一次交互过程。HTTP协议，是一个无状态协议，即所有的状态都保存在服务器端。<BR>
				因此，如果客户端想要操作服务器，必须通过某种手段，让服务器端发生“状态转化”，这种转化是建立在表现层之上的，所以就是表现层状态转化<BR>
				具体说，就是HTTP协议中，四个表示操作方式的动词：GET POST PUT DELETE，分别对应四种基本操作：获取资源、新建资源、更新资源、删除资源<BR>
<BR>
2. REST风格的URL<BR>
<BR>
	新增：/order	POST		<BR>
	修改：/order/1	PUT 			update?id=1<BR>
	获取：/order/1	GET			get?id=1<BR>
	删除：/order/1	DELETE		delete?id=1<BR>
	<BR>
	使用@pathvariable获取目标方法中的参数值<BR>
	<BR>
3. 发送put请求和delete请求<BR>
<BR>
	1）需要配置hiddenhttpmethodfilter<BR>
	<BR>
	2）需要发送POST请求<BR>
	<BR>
	3）需要在发送POST请求时携带一个name=&quot;_method&quot;的隐藏域，值为DELETE或PUT<BR>
	<BR>
4. 使用@requestparam来映射请求参数<BR>
<BR>
	1）value：请求参数的参数名<BR>
	<BR>
	2）required：该参数是否必须，默认为true<BR>
	<BR>
	3）defaultvalue：请求参数的默认值<BR>
	<BR>
	4）类似的，@requestheader映射请求头，@cookievalue映射cookie值<BR>
	<BR>
5. springMVC会按请求参数名和POJO属性名进行自动匹配，自动为该对象填充属性值，支持级联属性<BR>
<BR>
6. 可以使用servlet原生的API作为目标方法的参数<BR>
<BR>
	httpservletrequest、httpservletresponse、httpsession、java.security.principal、lacale inputstream、outputstream、reader、writer<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>

</DD>
<DT>3. 视图</DT>
<!--property:date_created=1550744675-->
<!--property:date_modified=1550745777-->
<DD>
1. 处理模型数据<BR>
<BR>
	输出模型数据的方法：modelandview、map和model、@sessionattributes、@modelattribute<BR>
	<BR>
	modelandview：目标方法的返回值可以是modelandview类型，其中可以包含视图和模型信息<BR>
				springmvc会把modelandview的model中数据放入request域对象中<BR>
				<BR>
	map和model：目标方法可以添加map类型（也可以是model类型或modelmap类型）参数<BR>
	<BR>
	@sessionattributes：除了可以通过属性名制定需要放到会话中的属性外（value属性值），还可以通过模型属性的对象类型指定那些模型属性需要放到会话中（type属性值）<BR>
					该注解只能放在类的上面，而不能修饰方法<BR>
<BR>
	@modelattribute：会在每个目标方法执行之前被springmvc调用<BR>
					应用场景：更新数据库时，某些属性值不需要更改，应先从数据库获取数据再修改，而不能创建新对象（不修改的属性值为空）<BR>
					<BR>
2. springmvc确定目标方法POJO类型入参的过程<BR>
<BR>
	1）确定一个key：若目标方法的POJO类型的参数没有使用@modelattribute修饰，则key为POJO类名第一个字母的小写，若使用了则key为注解的value值<BR>
	2）在implicitmodel查找key对应的对象，若存在，则作为入参传入<BR>
	3）若implicitmodel中不存在key对应的对象，则检查当前的handler是否使用@sessionattributes注解修饰，若使用了该注解，且@sessionattributes注解的value蜀兴职中包含了key，则会从httpsession中获取key所对应的value值<BR>
	若存在则直接传入目标方法的入参中，若不存在则抛出异常<BR>
	4）若handler没有表示@sessionattributes注解或@sessionattributes注解的value值中不包含key，则会通过反射来创建POJO类型的参数，传入为目标方法的参数<BR>
	5）springmvc会把key和value保存到implicitmodel中，进而会保存到request中<BR>
	<BR>
3. 视图和视图解析器<BR>
<BR>
	1）请求处理方法执行完成后，最终返回一个modelandview对象。对于那些发挥string、view、modelmap等类型的处理方法，springmvc也会在内部将他们装配成一个modelandview对象，它包含了逻辑名和模型对象的视图<BR>
	2）springmvc借助视图解析器得到最终的视图对象，最终的视图可以使jsp，也可能是Excel等各种形式的视图<BR>
	3）对于最终究竟采取何种视图对象对模型数据进行渲染，处理器并不关心，处理器工作重点聚焦在生产模型数据的工作上，从而实现mvc的充分解耦<BR>
	<BR>
	视图：<BR>
	4）作用是渲染模型数据，将模型里的数据以某种形式呈现给客户<BR>
	5）为了实现视图模型和具体实现技术的解耦，spring在org.framework.web.servlet包中定义了一个高度抽象的view接口<BR>
	6）视图对象由视图解析器负责实例化。由于视图时无状态的，所以他们不会有线程安全问题<BR>
	<BR>
	视图解析器<BR>
	1）springmvc为逻辑视图名的解析提供了不同的策略，可以在springweb上下文中配置一中或多种解析策略，并指定他们之间的先后顺序。每一种映射策略对应一个具体的视图解析器实现类<BR>
	2）视图解析器的作用：讲逻辑视图解析为一个具体的视图对象<BR>
	3）所有的视图解析器都必须实现viewresolver接口<BR>
	<BR>
4. 使用&lt;mvc:view-controller&gt;可以直接响应妆发的页面，无需经过handler方法（会导致原来的配置失效，加上&lt;mvc:annotation-driven&gt;就可以共用了）	<BR>
<BR>
5. 在返回的字符串中带forword:或redirect:前缀时可以完成转发或重定向				<BR>
	<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>

</DD>
</DL>

</DD>
</DL>
</BODY>
</HTML>
