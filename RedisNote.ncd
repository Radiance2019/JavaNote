<!DOCTYPE NoteCase-File>
<!--LastNote:7-->
<HTML>
<HEAD>
<meta content="text/html;charset=UTF-8" http-equiv="Content-Type">
<meta name="generator" content="NoteCase 1.9.8">
<TITLE></TITLE>
</HEAD>
<BODY>
<DL>
<DT>1. 概述</DT>
<!--property:date_created=1558316877-->
<!--property:date_modified=1558336042-->
<DD>
1. 为什么用nosql<BR>
<BR>
	1）数据存储的瓶颈<BR>
		*数据量的总大小，一个机器放不下<BR>
		*数据的索引一个机器的内存放不下<BR>
		*访问量（读写混合）一个实例不能承受<BR>
	2）Memcached（缓存）+ MySQL + 垂直拆分<BR>
	3）MySQL主从复制/读写分离<BR>
	4）分库分表+水平拆分+MySQL集群<BR>
	5）MySQL扩展性瓶颈<BR>
	6）今天的架构<BR>
		*客户----企业级防火墙----nginx负载均衡（主备）----app服务器----MySQL集群----<BR>
			移动信息服务器、Hadoop集群、实时通信服务器、流媒体服务器、电子邮件服务器、转发服务器、文件图片服务器<BR>
	7）为什么使用nosql<BR>
		用户生成的数据、操作日志成倍增加，传统关系型数据不再使用<BR>
		非关系型数据库存储不需要固定的模式，无需多余操作就可以横向扩展<BR>
		<BR>
2. nosql的优势<BR>
	<BR>
	1）易扩展<BR>
	2）大数据量高性能<BR>
		*MySQL使用query cache，更新缓存失效，是一种大粒度的cachee<BR>
		*nosql使用记录级cache，是一种细粒度的cache<BR>
	3）多样灵活的数据模型<BR>
		*无需事先为要存储的数据建立字段<BR>
	4）RDBMS VS nosql<BR>
		RDBMS		<BR>
			*高度组织化结构化数据<BR>
			*结构化查询语言<BR>
			*数据和关系都存储在单独的表中<BR>
			*数据操纵语言，数据定义语言<BR>
			*严格的一致性<BR>
			*基础事务<BR>
		NoSQL<BR>
			*表示不仅仅是SQL<BR>
			*没有声明性查询语言<BR>
			*没有预定义的模式<BR>
			*键值对存储，列存储，文档存储，图形数据库<BR>
			*最终一致性，非ACID<BR>
			*非结构化和不可预知的数据<BR>
			*CAP定理<BR>
			*高性能，高可用性和可伸缩性<BR>
<BR>
3. 种类<BR>
<BR>
	Redis、memcache、MongoDB<BR>
<BR>
4. 3V+3高<BR>
<BR>
	1）海量（volume）、多样（variety）、实时（velocity）<BR>
	2）高并发、高可扩、高性能<BR>
<BR>
5. 大型互联网应用的难点和解决方案<BR>
<BR>
	1）难点<BR>
		*数据类型多样性<BR>
		*数据源多样性和变化重构<BR>
		*数据源改造而数据服务平台不需要大面积重构<BR>
	2）解决方案<BR>
		*统一数据平台服务层UDSL<BR>
			*映射、API、热点缓存<BR>
<BR>
6. nosql经典应用<BR>
<BR>
	以一个电商客户、订单、订购、地址模型来对比下关系型数据库和非关系型数据库											<BR>
		*关系型数据库<BR>
			*客户表与订单表存在一对多的关系<BR>
			*订单明细<BR>
			*收货地址<BR>
		*nosql数据模型：BSON<BR>
			*是一种类json的二进制形式存储格式，Binary json<BR>
			*支持内嵌的文档对象和数组对象<BR>
		*对比<BR>
			*高并发的操作不建议有关联查询，使用冗余数据来避免关联查询<BR>
			*分布式事务支持不了太多并发<BR>
			聚合模型：KV键值、BSON、列族、图<BR>
<BR>
7. nosql数据库的四大分类<BR>
<BR>
	1）KV键值<BR>
	2）文档型数据库（bson格式较多）：couchDB，MongoDB<BR>
	3）列存储数据库：Cassandra，HBASE<BR>
	4）图关系数据库：Neo4J，infogrid，社交网络，推荐系统等<BR>
<BR>
8. 分布式数据库中CAP原理CAP+BASE<BR>
<BR>
	1）CAP<BR>
		*C：consistency，强一致性<BR>
		*A：availability，可用性<BR>
		*P：Partition tolerance，分区容错性<BR>
	2）CAP三进二：CA（RDBMS）、CP（Redis，MongoDB）、AP（大多数网站架构的选择）<BR>
	3）BASE：通过让系统放松对某一时刻数据一致性的额要求来换取系统整体伸缩性和性能上的改观<BR>
		*基本可用：basically available<BR>
		*软状态：soft state<BR>
		*最终一致：eventually consistent<BR>
<BR>
9. 分布式与集群<BR>
<BR>
	1）分布式：不同的多台服务器上面部署不同的服务模块，通过RPC/RMI之间通信和调用，对外提供服务和组内协作<BR>
	2）集群：不同的多台服务器上面部署相同的服务模块，通过分布式调度软件进行统一的调度，对外提供服务和访问<BR>
<BR>
10. Redis三个特点<BR>
<BR>
	1）Redis支持数据持久化，可以将内存中的数据异步保存在磁盘中，重启的时候可以再次加载进行使用<BR>
	2）Redis不仅仅支持简单的key-value类型的数据，同时还提供了list、set、zset、hash等数据结构的存储<BR>
	3）Redis支持数据的备份，即master-slave模式的数据备份<BR>
<BR>
11. 其他杂项<BR>
<BR>
	1）单采用单线程，避免了不必要的上下文切换和竞争条件，也不存在多进程或者多线程导致的切换而消耗 CPU，不用去考虑各种锁的问题，不存在加锁释放锁操作，没有因为可能出现死锁而导致的性能消耗<BR>
	2）使用多路I/O复用模型，非阻塞IO；Linux中epoll实现，Windows中select实现<BR>
	3）select命令切换数据库<BR>
	4）DBsize查看当前数据库的key数量<BR>
	5）flushdb清空当前数据库，flushall清空所有数据库
</DD>
<DT>2. 五大数据类型</DT>
<!--property:date_created=1558336050-->
<!--property:date_modified=1559286270-->
<DD>
1. string<BR>
<BR>
	1）string类型是二进制安全的，即redis的string可以包含任何数据，如图片或序列化对象<BR>
	2）一个字符串value最多可以是512MB<BR>
	3）常用方法<BR>
		*set/get/del/append/strlen：增改/查/删/后拼接/长度<BR>
		*incr/decr/incrby/decrby：增/减/增量加/增量减<BR>
		*getrange/setrange：读子串/写覆盖子串<BR>
		*setex/setnx：设过期时间秒/如果不存在则写<BR>
		*mset/mget/msetnx：合并写/合并读/全部不存在则写<BR>
<BR>
2. hash<BR>
<BR>
	1）hash是一个键值对集合<BR>
	2）是一个string类型的field和value的映射表，hash特别适合用于存储对象<BR>
	3）常用方法<BR>
		*hset：添加单属性单值<BR>
		*hget：获取单属性单值<BR>
		*hmset：添加多属性多值<BR>
		*hmget：获取多属性多值<BR>
		*hgetall：获取全部属性和值<BR>
		*hdel：删除单属性<BR>
		*hlen：获取属性个数<BR>
		*hexists：属性是否存在<BR>
		*hkeys：获取全部属性<BR>
		*hvals：获取全部值<BR>
		*hincrby/hincrbyfloat：增量加<BR>
		*hsetnx：不存在则添加单属性单值<BR>
	<BR>
3. list<BR>
	<BR>
	1）简单的字符串列表，按照插入顺序排序，可以添加一个元素至头部或者尾部，底层用链表实现<BR>
	2）常用方法<BR>
		*lpush/rpush/lrange：左压入/右压入/左读取<BR>
		*lpop/rpop：左弹出/右弹出，返回弹出值<BR>
		*lindex：按照索引下标获得元素<BR>
		*llen：获取元素个数<BR>
		*lrem：删除N个value<BR>
		*ltrim：根据下标截取指定范围的值再赋值给key<BR>
		*rpoplpush：从源列表右弹出元素左压入目的列表<BR>
		*lset key index value：指定位置元素赋值<BR>
		*linsert key before/after value1 value2：把value2插入value1前面或者后面<BR>
<BR>
4. set：string类型的无序集合，用hashtable实现<BR>
<BR>
	1）常用方法<BR>
		*sadd/smember/sismember：添加元素/获取全部元素/元素是否存在<BR>
		*scard：获取集合里元素个数<BR>
		*srem：删除集合中的元素<BR>
		*srandmember：随机获取几个数<BR>
		*spop：随机出栈<BR>
		*smove：将key1里的某个值添加到key2<BR>
		*sdiff：差集<BR>
		*sinter：交集<BR>
		*sunion：并集<BR>
<BR>
5. zset：每个元素都会关联一个double类型的分数，通过分数为成员排序，成员唯一而分数不唯一，是有序集合<BR>
<BR>
	1）常用方法<BR>
		*zadd：带分数添加<BR>
		*zrange：升序读取值<BR>
		*zrange withscores：带分数升序读取值<BR>
		*zrangebyscore：限制分数范围读取值<BR>
			*（：表示不包含<BR>
			*limit：表示从下标开始连续读多个值<BR>
		*zrem：删除元素<BR>
		*zcard：获取元素个数<BR>
		*zcount：限定范围获取元素个数<BR>
		*zrank：获取下标<BR>
		*zscore：获取分数<BR>
		*zrevrank：降序获取下标<BR>
		*zrevrange：降序读取值<BR>
		*zrevrangebyscore：降序限制分数范围读取值<BR>
		<BR>
6. key关键字<BR>
<BR>
	1）keys *：枚举所有key<BR>
	2）exists key：判断key是否存在<BR>
	3）move key db：从当前库删除，移至其他库<BR>
	4）expire key：为key设置过期时间<BR>
	5）ttl key：查看还有多少秒过期；-1表示永不过期，-2表示已过期<BR>
	6）type key：查看key类型
</DD>
<DT>3. 配置文件</DT>
<!--property:date_created=1559286275-->
<!--property:date_modified=1559813361-->
<DD>
1. 过期策略<BR>
<BR>
	1）volatile-lru：使用LRU算法移除key，只对设置了过期时间的键<BR>
	2）allkeys-lru：使用LRU算法移除key<BR>
	3）volatile-random：在过期集合中移除随机的key，只对设置了过期时间的key<BR>
	4）allkeys-random：移除随机的key<BR>
	5）volatile-ttl：移除那些TTL值最小的key，即那些最近要过期的key<BR>
	6）noeviction：不进行移除，针对写操作，只是返回错误信息<BR>
	<BR>
2. 日志级别<BR>
	<BR>
	1）debug：用于开发测试<BR>
	2）verbose：冗长信息<BR>
	3）notice：适用于生产模式<BR>
	4）warning：警告信息<BR>
	<BR>
3. 常见配置<BR>
<BR>
	1）默认不启用守护进程<BR>
		启用守护进程：daemonize yes<BR>
	2）当redis以守护进程方式运行时，redis会把pid写入/var/run/redis.pid文件<BR>
		指定文件：pidfile /var/run/redis.pid<BR>
	3）指定监听端口<BR>
		port 6379<BR>
	4）绑定主机地址<BR>
		bind 127.0.0.1<BR>
	5）客户端闲置多长时间后关闭（若为0，表示关闭该功能）<BR>
		timeout 300<BR>
	6）指定日志记录级别，默认为verbose<BR>
		loglevel notice<BR>
	7）日志记录方式，默认为标准输出，如果redis为守护进程方式运行，这里配置为标准输出，则日志会发送给/dev/null<BR>
		logfile stdout<BR>
	8）设置数据库数量<BR>
		databases 16<BR>
	9）指定多长时间内有多少次更新操作，就将数据同步导数据文件，可以多条件配合<BR>
		save &lt;seconds&gt; &lt;changes&gt;<BR>
		默认配置提供了三个条件：<BR>
		save 900 1<BR>
		save 300 10<BR>
		save 60 10000<BR>
	10）指定存储值本地数据库时是否压缩数据，默认为yes，采用LZF压缩，为节省CPU时间可关闭该选项，会导致数据文件变大<BR>
		rdbcompression yes<BR>
	11）指定本地数据库文件名，默认为dump.rdb<BR>
		dbfilename dump.rdb<BR>
	12）指定本地数据库存放目录<BR>
		dir ./<BR>
	13）设置本机为slav服务时，设置master服务的IP地址及端口，redis启动时会自动从master进行数据同步<BR>
		slaveof &lt;masterip&gt; &lt;masterport&gt;<BR>
	14）当没速腾服务设置了密码保护时，slav服务连接master的密码<BR>
		masterauth &lt;master-password&gt;<BR>
	15）设置redis连接密码，如果配置了密码，需要通过auth password命令提供密码，默认关闭<BR>
		config get requirepass / config set requirepass “123456”<BR>
	16）设置同一时间最大客户端连接数，默认无限制，如果设置maxclients为0，表示不作限制，超出限制会关闭新连接并返回max number of clients reached信息<BR>
		maxclients 128<BR>
	17）指定redis最大内存限制，达到最大内存后悔先尝试清除已到期或即将到期的key，此方法处理后依然达到最大值则无法写入，但仍可读取，新的vm机制把key放入内存而value放入swap区<BR>
		maxmemory &lt;bytes&gt;<BR>
	18）制定是否在每次更新操作后进行日志记录，默认异步将数据写入磁盘<BR>
		appendonly no<BR>
	19）指定更新日志文件名，默认为appendonly.aof<BR>
		appendfilename appendonly.aof<BR>
	20）指定更新日志条件，3个可选值：<BR>
		no：表示等操作系统进行数据缓存同步到磁盘<BR>
		always：表示每次更新操作后手动调用fsync()将数据写到磁盘（慢，安全）<BR>
		everysec：表示每秒同步一次（默认）<BR>
		appendfsync everysec<BR>
	21）指定是否启用虚拟内存机制，默认为no，vm机制将数据分页存放，冷数据swap到磁盘上，热数据换出道内存中<BR>
		vm-enabled no<BR>
	22）虚拟内存文件路径，默认值为/tmp/redis.swap，不可多个redis实例共享<BR>
		vm-swap-file /tmp/redis.swap<BR>
	23）将所有大于vm-max-memory的数据存入虚拟内存，keys存在内存中，即设为0时所有value存于磁盘<BR>
		vm-max-memory 0<BR>
	24）redis swap分成了很多的page，一个对象可以保存在多个page上，但一个page上不能被多个对象共享<BR>
		vm-page-size 32<BR>
	25）设置swap文件中page数量，由于页表（一种表示页面空闲或使用的bitmap）是放在内存中的，磁盘上每8个pages将消耗1byte的内存<BR>
		vm-pages 134217728<BR>
	26）设置访问swap文件的线程数，最好不要超过机器的核数，设为0则所有操作都串行，默认为4<BR>
		vm-max-threads 4<BR>
	27）设置在向客户端应答时，是否把较小的包合并为一个包发送，默认开启<BR>
		glueoutputbuf yes<BR>
	28）指定在超过一定的数量或最大元素超过某一临界值时，采用一种特殊的哈希算法<BR>
		hash-max-zipmap-entries 64<BR>
		hash-max-zipmap-value 512<BR>
	29）指定是否激活重置哈希，默认为开启<BR>
		activerehashing yes<BR>
	30）指定包含其他的配置文件，可以在同一主机上多个redis势力之间使用同一份配置文件，而同时各个实例又拥有自己的特定配置文件<BR>
		include /path/to/local.conf
</DD>
<DT>4. 持久化</DT>
<!--property:date_created=1559291524-->
<!--property:date_modified=1559811721-->
<DD>
1. RDB（Redis DataBase）<BR>
<BR>
	1）含义：在指定的时间间隔内将内存中的数据集快照写入磁盘<BR>
	2）是什么：Redis会单独创建一个子进程来进行持久化，先将数据写入到一个临时文件中，待持久化过程都技术了，再用这个临时文件替换上次持久化好的文件<BR>
			整个过程中主进程不进行任何IO操作，确保了高性能<BR>
			如果需要大规模数据恢复，且对于数据恢复的完整性不是特别敏感，RDB方式更加高效<BR>
			缺点是最后一次持久化的数据可能丢失<BR>
	3）fork：作用是复制一个与当前进程一样的进程。新进程的所有数据都和原进程一致，但是是一个全新的进程，并作为原进程的子进程<BR>
	4）保存的是dump.rdb文件<BR>
	5）配置位置：RDB是这个内存的压缩过的snapshot快照<BR>
		*触发条件：save 秒 写次数（默认1分钟写1w次或5分钟写10次或15分钟写1次）<BR>
		*禁用：不设置任何save指令，或传入空字符串<BR>
		*stop-writes-on-bgsave-error：存储错误时停止写入，默认为yes，配置为no则表示不在乎数据不一致或有其他手段发现并控制<BR>
		*rbdcompression：存储到磁盘中的磁盘中的快照，可以设置是否用LZF算法压缩存储<BR>
		*rdbchecksum：存储快照后还可以让redis使用CRC64算法进行数据校验，增大CPU10%消耗<BR>
	6）如何触发快照<BR>
		*配置文件中的配置：冷拷贝后重新使用<BR>
		*命令save或者bgsave：save时只管保存，其他全部阻塞；bgsave后台异步进行快照操作，lastsave命令获取最后一次成功执行快照的时间<BR>
		*flushall：立刻生成dump.rdb文件<BR>
	7）如何恢复：将备份文件移动到redis安装目录并启动服务即可（redis-check-dump --fix）<BR>
	8）优势：适合大规模数据恢复；对数据完整新和一致性要求不高<BR>
	9）劣势：可能会丢失最后一次快照后的所有修改；fork时内存中数据被复制一份，二倍膨胀性<BR>
	<BR>
2. AOF（Append Only File）<BR>
<BR>
	1）是什么：以日志形式来记录每个写操作，将redis执行过的所有指令记录下来，只许追加文件但不可以改写文件redis启动之初会读取改文件重新构建数据<BR>
			即，redis重启的话就根据日志文件的内容将指令从前到后执行一次以完成数据的恢复工作<BR>
	2）配置位置：append only mode <BR>
		*appendonly：默认no，不开启<BR>
		*appendfilename：文件名<BR>
		*appendfsync：always同步持久化，每次发生数据变更都会记录到磁盘，性能差而完整性好；everysec默认，异步操作，每秒记录一次，秒级数据丢失<BR>
		*no-appendfsync-on-rewrite：重写时是否可以运用appendfsync，用默认no即可，保证数据安全性<BR>
		*auto-aof-rewrite-min-size：设置重写的基准值<BR>
		*auto-aof-rewrite-percentage：设置重写的基准值<BR>
	3）AOF启动/恢复<BR>
		*正常恢复：启动设置yes，将有数据的aop文件复制一份保存到对应目录，重启redis重新加载<BR>
		*异常恢复：启动设置yes，备份被写坏的AOF文件，redis-check-aof --fix进行修复，重启redis重新加载<BR>
	4）rewrite：AOF采用文件追加方式，文件会越来越大，因此增加了重写机制，当文件大小超过阈值时，将文件内容压缩，只保留可恢复数据的最小指令集<BR>
		*重写原理：文件过大时，fork出一条新进程写临时文件，遍历新进程的内存中数据，每条记录有一条set语句<BR>
		*触发机制：redis惠济路上次重写是AOF大小，默认配置是当AOF文件大小是上次rewrite后大小的一倍且文件大于64M时触发<BR>
	5）优势：每秒同步、每修改同步、不同步<BR>
	6）劣势：文件远大于rdb，恢复速度慢于rdb<BR>
<BR>
3. 如何选择<BR>
<BR>
	1）只做缓存：不适用持久化<BR>
	2）同时开启两种持久化方式：优先使用AOF文件恢复原始数据<BR>
	3）在slave上持久化RDB文件，15分钟备份1次；AOF基础大小设为5G；使用主从复制代替AOF<BR>
		
</DD>
<DT>5. 事务</DT>
<!--property:date_created=1559811759-->
<!--property:date_modified=1559826966-->
<DD>
1. 事务命令<BR>
<BR>
	1）discard：取消事务，放弃执行事务块内的所有命令<BR>
	2）exec：执行事务块内的命令<BR>
	3）multi：标记一个事务块的开始<BR>
	4）unwatch：取消watch命令对所有key的监视<BR>
	5）watch：监视一个或多个key，如果在事务执行之前这些key被其他命令所改动，事务被打断<BR>
	<BR>
2. Redis对事务部分支持<BR>
<BR>
	1）正常执行：exec<BR>
	2）放弃事务：discard<BR>
	3）全体连坐：指令错误则全部不执行<BR>
	4）冤头债主：运行异常则异常命令不执行<BR>
	5）watch监控<BR>
		*悲观锁：认为每次拿数据时都会被别人修改，因此拿数据时上锁，如行锁、表锁、读锁、写锁等<BR>
		*乐观锁：认为每次拿数据时不会被别人修改，因此不会上锁，但更新时判断此间是否有人更新数据，适用于多读的应用类型<BR>
				*提交的版本号必须大于记录当前的版本号才能更新<BR>
		*CAS：check-and-set，属于乐观锁<BR>
		*执行exec后，之前加的监控锁都被取消<BR>
		<BR>
3. 事务的三阶段<BR>
<BR>
	1）开启<BR>
	2）入队<BR>
	3）执行<BR>
	<BR>
4. 事务的三特性<BR>
<BR>
	1）单独的隔离操作：事务中的命令会序列化、按顺序的执行，执行过程中不会被其他客户端发送来的命令请求打断<BR>
	2）无隔离级别：事务提交前任何指令都不会被执行<BR>
	3）不保证原子性：其中一条命令执行失败，其他仍会执行，不发生回滚
</DD>
<DT>6. 发布和订阅</DT>
<!--property:date_created=1559827029-->
<!--property:date_modified=1559827556-->
<DD>
1. 是什么<BR>
<BR>
	进程间的一种消息通信模式，发送者（pub）发送消息，订阅者（sub）接收消息<BR>
	<BR>
2. 先订阅后发布才能收到消息<BR>
<BR>
	1）可以一次性订阅多个<BR>
		*订阅：subscribe c1 c2 c3<BR>
		*消息发布：publish c2 hello-redis<BR>
	<BR>
	2）订阅多个使用通配符<BR>
		*订阅：psubscribe new*<BR>
		*消息发布：publish new1 redis2015
</DD>
<DT>7. 主从复制</DT>
<!--property:date_created=1559827574-->
<!--property:date_modified=1559986001-->
<DD>
1. 概念：主机数据更新后根据配置和策略，自动同步到备机的master/slaver机制，master以写为主，slave以读为主<BR>
	<BR>
2. 作用：读写分离/容灾恢复<BR>
<BR>
3. 使用主从复制<BR>
<BR>
	1）配从不配主<BR>
	2）从库配置：slaveof 主库ip 主库端口<BR>
		*每次与master断开后需要重新连接，除非配置进redis.conf<BR>
		*info replication：查看主从信息<BR>
	3）修改配置文件细节操作<BR>
		*拷贝多个redis.conf文件<BR>
		*开启daemonize yes<BR>
		*pid文件名<BR>
		*指定端口<BR>
		*log文件名<BR>
		*dump.rdb名<BR>
	4）常用方法<BR>
		*一主二从<BR>
			*slave加入时复制master已有数据<BR>
			*slave只读，不能写入<BR>
			*master断开从slave为down，等master重连后可以继续工作<BR>
			*slave断开需要重新连接，除非配置进redis.conf<BR>
		*薪火相传<BR>
			*上一个slave可以使下一个slave的master，slave同样可以接受其他slaves的连接和同步请求，有效减轻了master的写压力<BR>
			*中途变更转向，会清楚之前的数据，重新建立拷贝最新的<BR>
			*slaveof 新主库ip 新主库端口<BR>
		*反客为主<BR>
			*slaveof no one：使当前数据库停止与其他数据库的同步，转成主数据库<BR>
		*复制原理<BR>
			*slave启动成功连接到一个master后会发送一个sync命令，master接到命令启动后台的存盘进程，同时收集所有接收到的用于修改数据集命令，在后台执行完毕后，master将传送整个数据文件到slave，完成一次同步<BR>
			*全量复制：slave服务在接受到数据库文件数据后，将其存盘并加载到内存中<BR>
			*增量复制：master继续将新的所有收集到的修改命令依次传给slave，完成同步，但只要是重连master，全量复制将被自动执行<BR>
		*哨兵模式（sentinel）：反客为主的自动版，能够后台监控主机是否故障，如果故障了根据投票数自动将从库转换为主库<BR>
			*调整结构，6379带80、81<BR>
			*自定义的/myredis目录下新建sentinel.conf文件<BR>
			*配置哨兵，填写内容<BR>
				*sentinel monitor host6379 127.0.0.1 6379 1<BR>
				*最后的数字1表示主机挂掉后slave投票看让谁接替成为主机，得票数多成为主机<BR>
			*启动哨兵：redis-sentinel /myredis/sentinel.conf<BR>
			*一组哨兵可以监控多个master<BR>
			*主机挂掉后重连将成为新主机的slave<BR>
			*复制延时：系统繁忙、slave数量增加时是复制延时加重
</DD>
<DT>8. jedis</DT>
<!--property:date_created=1559986011-->
<!--property:date_modified=1560005195-->
<DD>
1. 连接<BR>
<BR>
	Jedis jedis = new Jedis(&quot;127.0.0.1&quot;, 6379)<BR>
	<BR>
2. 事务<BR>
<BR>
	1）开启事务：Transaction transaction = jedis.multi()<BR>
	2）任务语句：transaction.set()<BR>
	3）执行事务：transaction.exec()<BR>
	4）监控：jedis.watch()<BR>
	<BR>
3. 主从复制<BR>
<BR>
	Jedis jedis_M = new Jedis(&quot;127.0.0.1&quot;, 6379)<BR>
	Jedis jedis_S = new Jedis(&quot;127.0.0.1&quot;, 6380)	<BR>
	jedis_S.slaveof(&quot;127.0.0.1&quot;, 6379)<BR>

</DD>
</DL>
</BODY>
</HTML>
