<!DOCTYPE NoteCase-File>
<!--LastNote:6-->
<HTML>
<HEAD>
<meta content="text/html;charset=UTF-8" http-equiv="Content-Type">
<meta name="generator" content="NoteCase 1.9.8">
<TITLE></TITLE>
</HEAD>
<BODY>
<DL>
<DT>Spring4Note</DT>
<!--property:date_created=1549544418-->
<!--property:date_modified=1550307732-->
<!--property:expanded-->
<DD>
<DL>
<DT>1. spring基础</DT>
<!--property:date_created=1550307711-->
<!--property:date_modified=1550307735-->
<DD>
1. Spring的概念<BR>
<BR>
	Spring使用Spring可以使简单的javabean实现以前只有EJB才能实现的功能<BR>
	Spring是一个IOC(DI)和AOP容器框架----IOC：反转控制/DI：注入<BR>
	<BR>
2. 描述<BR>
<BR>
	轻量级、依赖注入、面向切面编程、容器（包含并且管理应用对象的生命周期）、<BR>
	框架（实现了使用简单的组件配置组合成一个复杂的应用，可以使用XML和Java注解组合这些对象）<BR>
	一站式（可以整合各种企业应用的开源框架和优秀的第三方类库，自身也提供了展现层的SpringMVC和Spring JDBC）<BR>
	<BR>
3. IOC和DI<BR>
	<BR>
	IOC：其思想是反转资源获取的方向。传统的资源查找方式要求组件向容器发起请求查找资源，作为回应，容器适时的返回资源。<BR>
		而应用了IOC之后，则是容器主动地将资源推送给它所管理的组件，组件所要做的就是选择一种合适的方式来接受资源。这<BR>
		种行为也被称为查找的被动形式<BR>
		<BR>
	DI：IOC的另一种表述方式，即组件以预先定义好的方式接受来自于容器的资源注入。<BR>
<BR>
4. Spring容器<BR>
<BR>
	SpringIOC容器读取Bean配置创建Bean实例之前，必须对它进行实例化。<BR>
	Spring提供了两种类型的IOC容器实现：<BR>
	①BeanFactory：IOC容器的基本实现，是Spring框架的基础设施，面向Spring本身<BR>
	②ApplicationContext：提供了更多的高级特性，是BeanFactory的子接口，面向使用Spring框架的开发者<BR>
					 几乎所有的应用场合都直接使用ApplicationContext而非底层的BeanFactory<BR>
	无论使用哪种方式，配置文件是相同的<BR>
	<BR>
5. Spring注入方式<BR>
<BR>
	①属性注入：通过setter方法注入Bean的属性值或依赖的对象，使用&lt;property&gt;元素，使用name属性指定Bean的属性名称，<BR>
			  value属性或&lt;value&gt;子节点指定属性值。属性注入是实际应用中最常用的注入方式。<BR>
			  如果字面值包含特殊字符，使用&lt;!CDATA[]&gt;包裹起来<BR>
	②构造器注入：通过构造方法注入Bean的属性值或依赖的对象，它保证了Bean实例在实例化后就可以使用<BR>
			     构造器注入在&lt;constructor-arg&gt;元素里声明属性，其中没有name属性<BR>
			     使用构造器在注入属性时可以指定参数的位置和参数类型，以区分重载构造器<BR>
	③工厂方法注入（不推荐） <BR>
	<BR>
6. Spring配置细节<BR>
<BR>
	①可以使用property的ref属性建立bean之间的引用关系<BR>
	②内部bean：不能在外部被引用（定义在property里面）	<BR>
	③赋值null：&lt;null/&gt;<BR>
	④为级联属性赋值：属性需要先初始化后才可以为级联属性复制，否则会有一场，和struts2不同<BR>
	⑤使用list节点为list类型的属性赋值（set类似）<BR>
	⑥使用map和entry子节点（key和value）来为map类型的属性赋值<BR>
	⑦使用props和prop子节点来为Properties属性复制<BR>
	⑧配置单例的集合bean，以供多个bean进行引用，需要导入util命名空间<BR>
	⑨通过p命名空间为bean的属性赋值，需要导入p命名空间<BR>
	<BR>
7. 自动装配<BR>
<BR>
	可以使用autowire属性指定自动装配的方式<BR>
	byName：根据bean的名字和当前bean的setter风格的属性名进行自动装配，若没有匹配的，则不赋值<BR>
	byType：根据bean的类型和当前bean的属性的类型进行自动装配，若IOC容器中有1个以上的类型匹配的bean，则抛异常<BR>
<BR>
8. bean配置的继承<BR>
<BR>
	①使用bean的parent属性指定继承哪个bean的配置<BR>
	②子bean从父bean继承配置，包括属性的配置<BR>
	③子bean可以覆盖从父bean继承过来的配置<BR>
	④父bean可以作为配置模板，也可以作为bean实例。若只想把父bean作为模板，可以设置bean的abstract属性为true，此时该bean不能被实例化<BR>
	⑤并不是bean元素里的所有属性都会被继承，例如autowire、abstract等<BR>
	⑥也可以忽略父bean的class属性，让子bean指定自己的类，而共享相同的属性配置，但此时abstract必须设为true<BR>
	<BR>
9. 依赖bean配置<BR>
<BR>
	①spring允许用户通过depends-on属性设定bean前置依赖的bean，前置依赖的bean会在本bean实例化之前创建好<BR>
	②如果前置依赖于多个bean，则可以通过逗号、空格的方式配置bean的名称<BR>
	<BR>
10. bean的作用域<BR>
<BR>
	使用bean的scope属性来配置bean的作用域<BR>
	singleton：默认值。容器初始化时创建bean的实例，在整个容器的生命周期内只创建这一个bean，是单例的<BR>
	prototype：原型的。容器初始化时不创建bean的实例，而在每次请求时都创建一个新的bean实例并返回<BR>
	<BR>
11. 使用外部属性文件<BR>
<BR>
	①命名空间加入context<BR>
	②使用&lt;context:property-placeholder location=&quot;classpath:db.properties&quot;/&gt;<BR>
	③value=&quot;${var}&quot;<BR>
	<BR>
12. SPEL<BR>
<BR>
	spring表达式语言：是一个支持运行时查询和操作对象图的强大的表达式语言<BR>
	语法类似于EL：spel使用#{...}作为定界符，所有在大括号中的字符都将被认为是spel<BR>
	spel为bean的属性进行动态赋值提供了便利<BR>
	通过spel可以实现：通过bean的id对bean进行引用、调用方法以及引用对象中的属性、计算表达式的值、正则表达式的匹配<BR>
	<BR>
13. IOC容器中Bean的生命周期方法<BR>
<BR>
	springIOC容器可以管理Bean的生命周期，spring在bean生命周期的特定点执行定制的任务<BR>
	springIOC容器对bean的生命周期进行管理的过程----通过构造器或工厂方法创建bean实例<BR>
								  	   ----为bean的属性设置值和对其他bean的引用<BR>
									   ----将bean的实例传递给bean后置处理器的postProcessBeforeInitialization方法<BR>
									   ----调用bean的初始化方法<BR>
									   ----将bean的实例传递给bean后置处理器的postProcessAfterInitialization方法<BR>
									   ----bean可以使用了<BR>
									   ----当容器关闭时，调用bean的销毁方法<BR>
	在bean的声明里设置init-method和destroy-method属性，为bean指定初始化和销毁方法<BR>
	bean的后置处理器----①实现BeanPostProcessor接口，并具体提供<BR>
						Object postProcessBeforeInitialization(Object bean, String beanName)：init-method之前被调用<BR>
						Object postProcessAfterInitialization(Object bean, String beanName)：init-method之后被调用<BR>
					 的实现<BR>
					bean：bean实例本身<BR>
					beanName：IOC容器配置的bean的名字<BR>
					返回值：是实际上返回给用户的那个bean，可以在以上两个方法中修改返回的bean，甚至返回一个新的bean<BR>
				 ----②配置bean的后置处理器：不需要配置id，IOC容器自动识别是一个bean的猴子处理器<BR>
					&lt;bean class=&quot;xxx.xxx.xxx.MyBeanPostProcessor&quot;&gt;&lt;/bean&gt;<BR>
					<BR>
14. bean的配置方式：通过全类名（反射）、通过工厂方法（静态工厂方法&amp;实例工厂方法）、factorybean<BR>
<BR>
	通过静态工厂方法配置bean----class属性：指向静态工厂方法的全类名<BR>
					     ----factory-method：指向静态工厂方法的名字<BR>
					     ----constructor-arg：如果工厂方法需要传入参数，使用它类配置参数<BR>
	通过实例工厂方法配置bean----factory-bean：指向实例工厂方法的bean<BR>
					     ----factory-method：指向静态工厂方法的名字<BR>
					     ----constructor-arg：如果工厂方法需要传入参数，使用它类配置参数<BR>
	通过factorybean配置bean----自定义的factorybean需要实现factorybean接口<BR>
					     ----class：指向factorybean的全类名<BR>
					     ----property：配置factorybean的属性，但实际返回的实例却是factorybean的getobject()方法返回的实例<BR>
					<BR>
15. 通过注解配置bean<BR>
<BR>
	组件扫描：spring能够从classpath下自动扫描，侦测和实例化具有特定注解的组件<BR>
	特定组件包括----@component：基本注解，标识了一个受spring管理的组件<BR>
			  ----@respository：标识持久层组件<BR>
			  ----@service：标识服务层（业务层）组件<BR>
			  ----@controller：标识表现层组件<BR>
	对于扫描到的组件，spring有默认的命名策略：使用非限定类名，第一个字母小写，也可以在注解中通过value属性值标识组件的名称<BR>
	当在组件类上使用了特定的注解之后，还需要在spring的配置文件中声明&lt;context:component-scan&gt;<BR>
	&lt;context:component-scan&gt;----base-package：包名<BR>
						----resource-pattern：指定扫描资源<BR>
						----&lt;context:exclude-filter type=&quot;annotation&quot; expression=&quot;org.springframework.stereotype.repository&quot;/&gt;：指定排除哪些表达式的组件<BR>
						----&lt;context:include-filter type=&quot;annotation&quot; expression=&quot;org.springframework.stereotype.repository&quot;/&gt;：指定包含哪些表达式的组件，该子节点需要use-default-filters=&quot;false&quot;<BR>
	使用@Autowired自动装配具有兼容类型的单个bean属性----构造器、普通字段、一切具有参数的方法都可以应用@Autowired<BR>
										    ----默认情况下，所有使用@Autowired注解的属性都需要被设置，当spring找到不匹配的bean装配属性时，会抛出异常，若某一属性允许不被设置，可以设置@Autowired注解的required属性为false<BR>
										    ----默认情况下，当IOC容器里存在多个类型兼容的bean时，通过类型的自动装配将无法工作，此时可以在@Qualifier注解里提供bean的名称，方法的形参也可以被@Qualifier标注<BR>
										    ----@Autowired注解可以应用在数组属性上，此时spring将会把所有匹配的bean进行自动装配<BR>
										    ----@Autowired注解可以应用在集合属性上，此时spring读取该集合的类型信息，然后自动装配所有与之兼容的bean<BR>
										    ----@Autowired注解可以用在map上，若该map的键值为string，那么spring将自动装配与之map值类型兼容的bean，此时beam的名称作为键值<BR>
	@resource与@inject与@autowired功能类似<BR>
	<BR>
16. 泛型依赖注入：父类用@Autowired关联，子类自动注入<BR>
<BR>
	<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
		
</DD>
<DT>2. AOP</DT>
<!--property:date_created=1550307741-->
<!--property:date_modified=1550375927-->
<DD>
1. AOP解决的问题<BR>
<BR>
	代码混乱：越来越多的非业务需求（日志和验证等）加入后，原有的业务方法急剧膨胀，每个方法在处理核心逻辑的同时还必须兼顾其他多个关注点<BR>
	代码分散：只是为了满足单一需求，就不得不在多个模块（方法）里多次重复相同的代码，如果需求发生变化，必须修改所有模块<BR>
	<BR>
2. 使用动态代理解决上述问题<BR>
<BR>
3. AOP<BR>
<BR>
	面向切面编程：是一种新的方法，是对传统OOP的补充<BR>
	AOP的主要编程对象是切面，而切面模块化横切的关注点<BR>
	在应用AOP编程时，仍然需要定义公共功能，但可以明确的定义这个功能在哪里，以什么方式应用，并且不必修改受影响的类，这样一来横切关注点就被模块化到特殊的对象切面里<BR>
	AOP的好处----每个事物逻辑位于一个位置，代码不分散，便于维护和升级<BR>
		       ----业务模块更简洁，只包含核心业务代码<BR>
	术语----切面：横切关注点（跨越应用程序多个模块的功能）被模块化的特殊对象<BR>
	      ----通知：切面必须要完成的工作<BR>
	      ----目标：被通知的对象<BR>
	      ----代理：项目表对象应用通知之后创建的对象<BR>
	      ----连接点：程序执行的某个特定位置。如类某个方法调用前、后、方法抛出异常后等<BR>
	      ----切点：AOP通过切点定位到特定的连接点。切点和连接点不是一对一的关系，一个切点匹配多个连接点，切点通过org.springframework.aop.Pointcut接口进行描述，他使用类和方法作为连接点的查询条件<BR>
<BR>
4. SpringAOP<BR>
<BR>
	加入jar包：aopalliance、aspectj.weaver、springaop、springsapects<BR>
	在配置文件中加入aop命名空间<BR>
	基于注解的方式----在配置文件中加入&lt;aop:sapectj-autoproxy&gt;<BR>
			     ----把横切关注点的代码抽象到切面类中，加入@component和@aspect注解<BR>
			     ----在类中声明各种通知：声明一个方法，加入@before、@after、@afterreturning、@afterthrowing、@around注解<BR>
			     ----@before(&quot;execution(* com.atguigu.spring.aop.impl.*.*(..))&quot;)<BR>
					----*1--方法修饰符<BR>
					----*2--接口名<BR>
					----*3--方法名<BR>
			     ----joinpoint可以获取方法名、参数等：joinpoint.getsignature().getname()、joinpoint().getargs()<BR>
	使用@order指定切面优先级，值越小优先级越高<BR>
	使用@pointcut重用切点表达式：一般不需要再该方法中填入其他的代码<BR>
	基于配置文件的方式----配置切面的bean<BR>
				   ----配置AOP&lt;aop:config&gt;----配置切点表达式&lt;aop:pointcut expression=&quot;&quot; id=&quot;&quot;&gt;<BR>
									----配置切面即通知&lt;aop:aspect ref=&quot;切面bean&quot; order=&quot;&quot;&gt;&lt;aop:before method=&quot;&quot; pointcut-ref=&quot;切点&quot;&gt;<BR>
<BR>
									<BR>
									<BR>
									<BR>
									<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
	
</DD>
<DT>3. JDBCTemplate</DT>
<!--property:date_created=1550476070-->
<!--property:date_modified=1550485137-->
<DD>
1. 使用JDBCTemplate<BR>
<BR>
	1）导入资源文件<BR>
<BR>
		&lt;context:property-placeholder location=&quot;classpath:db.properties&quot;/&gt;<BR>
	<BR>
	2）配置数据源（dbcp）<BR>
<BR>
		&lt;bean id=&quot;dataSource&quot;<BR>
			class=&quot;org.apache.commons.dbcp.BasicDataSource&quot;&gt;<BR>
			&lt;property name=&quot;username&quot; value=&quot;${jdbc.user}&quot;&gt;&lt;/property&gt;<BR>
			&lt;property name=&quot;password&quot; value=&quot;${jdbc.password}&quot;&gt;&lt;/property&gt;<BR>
			&lt;property name=&quot;url&quot; value=&quot;${jdbc.jdbcurl}&quot;&gt;&lt;/property&gt;<BR>
			&lt;property name=&quot;driverClassName&quot; value=&quot;${jdbc.driverclass}&quot;&gt;&lt;/property&gt;<BR>
		&lt;/bean&gt;<BR>
		<BR>
	3）配置spring的JDBCTemplate<BR>
		<BR>
		&lt;bean id=&quot;jdbcTemplate&quot;<BR>
			class=&quot;org.springframework.jdbc.core.JdbcTemplate&gt;<BR>
			&lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;<BR>
		&lt;/bean&gt;<BR>
		<BR>
	4）测试初始化<BR>
	<BR>
		private ApplicationContext ctx = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;)<BR>
		private JdbTemplate jdbcTemplate = (JdbcTemplate) ctx.getBean(&quot;jdbcTemplate&quot;)<BR>
		<BR>
	5）执行sql<BR>
		<BR>
		//更新一条<BR>
		string sql = &quot;update employees set last_name = ? where id = ?<BR>
		jdbcTemplate.update(sql, &quot;Jack&quot;, 5)<BR>
		//批量更新：jdbcTemplate.batchUpdate(sql, batchList)，其中batchList是Object[]的List类型<BR>
		//查询一个对象：RowMapper&lt;Employee&gt; rowMapper = new BeanPropertyRowMapper&lt;&gt;(Employee.Class)<BR>
					jdbcTemplate.queryForObject(sql, rowMapper, 1)<BR>
					****不支持级联属性<BR>
		//查询实体类的集合：jdbc.Template.query(sql, rowMapper, 5)<BR>
		//获取单个列的值：String sql = &quot;SELECT count(id) FROM employees&quot;<BR>
					  long cont = jdbcTemplate.queryForObject(sql, Long.class)  <BR>
	<BR>
2. 使用具名参数：NamedParameterJdbcTemplate 可以为参数起名字<BR>
			可以使用update(strting sql, SqlParameterSource parameter)方法进行更新操作，使用SqlParameterSource的BeanPropertySqlParameterSource实现类作为参数				
</DD>
<DT>4. 事务</DT>
<!--property:date_created=1550485141-->
<!--property:date_modified=1550487978-->
<DD>
1. 声明式事务<BR>
<BR>
	1）配置事务管理器<BR>
	<BR>
		&lt;bean id=&quot;transactionManager&quot;<BR>
			class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;<BR>
			&lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;<BR>
		&lt;/bean&gt;<BR>
		<BR>
	2）启用事务注解<BR>
	<BR>
		命名空间加入tx<BR>
		&lt;tx:annotation-driven transaction-manager=&quot;transactionManager&quot;/&gt;<BR>
		<BR>
	3）添加事务注解<BR>
	<BR>
		@transactional<BR>
		<BR>
	4）使用propagation指定事务的传播行为，即当前的事务方法被另外一个事务方法调用时如何使用事务<BR>
	<BR>
		----REQUIRED：默认值，在现有时事务内运行，钱不够时两本书都买不了<BR>
		----REQUIRES_NEW：启动一个新事务，并在自己的事务内运行，如果有事务在运行，则先挂起，能买一本是一本<BR>
		<BR>
	5）使用isolation指定事务的隔离级别，最常用的取值为READ_COMMITTED，默认情况下对所有的运行时异常进行回滚，也可以通过对应的属性设置<BR>
	<BR>
	6）使用rollbackFor、noRollbackFor等设置回滚属性<BR>
	<BR>
	7）使用readonly指定事务是否为只读，表示这个事务只读取数据但不更新数据，这样可以帮助数据库引擎优化事务<BR>
	<BR>
	8）使用timeout指定强制回滚之前事务可以占用的时间<BR>
	<BR>
2. 使用XML文件的方式配置事务<BR>
<BR>
	1）配置bean<BR>
	<BR>
	2）配置事务管理器<BR>
	<BR>
		&lt;bean id=&quot;transactionManager&quot; class=&quot;org.springframework.jdbc.dataSource.DataSourceTransactinManager&quot;&gt;<BR>
			&lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;<BR>
		&lt;/bean&gt;<BR>
	<BR>
	3）配置事务属性<BR>
	<BR>
		&lt;tx:advice id=&quot;txAdvice&quot; transaction-manager=&quot;transactionManager&quot;&gt;<BR>
			&lt;tx:attributes&gt;<BR>
				&lt;tx:method name=&quot;*&quot;/&gt;<BR>
			&lt;/tx:attributes&gt;<BR>
		&lt;/tx:advice&gt;<BR>
		<BR>
	4）配置事务切入点，以及把事务切入点和食物事务管理连起来<BR>
	<BR>
		&lt;aop:config&gt;<BR>
			&lt;aop:pointcut expression=&quot;execution(* com.atguigu.spring.tx.xml.BookshopService.*(..))&quot;<BR>
				id=&quot;txPointCut&quot;/&gt;<BR>
			&lt;aop:advisor advice-ref=&quot;txAdvice&quot; pointcut-ref=&quot;txPointCut&quot;/&gt;<BR>
		&lt;/aop:config&gt;<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
				
</DD>
<DT>5. spring整合hibernate</DT>
<!--property:date_created=1550488369-->
<!--property:date_modified=1550489623-->
<DD>
1. spring整合hibernate整合什么？<BR>
<BR>
	1）有IOC容器来管理hibernate的sessionfactory<BR>
	2）让hibernate使用上spring的声明式事务<BR>
	<BR>
2. 整合步骤<BR>
<BR>
	1）加入hibernate<BR>
		<BR>
		jar包----&gt;添加hibernate的配置文件：hibernate.cfg.xml----&gt;编写持久化类对应的.xml文件<BR>
		<BR>
	2）加入spring<BR>
	<BR>
		（1）jar包<BR>
		<BR>
		（2）加入spring的配置文件----配置数据源<BR>
						      ----配置hibernate的sessionfactory实例：通过spring提供的localsessionfactorybean进行配置<BR>
								&lt;bean id=&quot;sessionFactory&quot; class=&quot;org.springframework.orm.hibernate4.LocalSessionFactoryBean&quot;&gt;<BR>
									//配置数据源属性<BR>
									&lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;<BR>
									//配置hibernate配置文件的位置及名称<BR>
									&lt;property name=&quot;configLocation&quot; value=&quot;classpath:hibernate.cfg.xml&quot;&gt;&lt;/property&gt;<BR>
									//配置hibernate映射文件的位置及名称，可以使用通配符<BR>
									&lt;property name=&quot;mappingLocations&quot; value=&quot;classpath:com/atguigu/spring/hibernate/entities/*.hbm.xml&quot;&gt;&lt;/property&gt;<BR>
								&lt;/bean&gt;<BR>
					     	       ----配置spring的声明式事务<BR>
								配置事务管理器----&gt;配置事务属性----&gt;配置事务切点，并把切点和事务属性关联起来<BR>
	<BR>
	3）整合
</DD>
<DT>6. web应用</DT>
<!--property:date_created=1550559145-->
<!--property:date_modified=1550561535-->
<DD>
1. spring在web中如何使用<BR>
<BR>
	1）jar包：额外加入spring-web、spring-webmvc<BR>
	<BR>
	2）spring配置文件<BR>
	<BR>
	3）创建IOC容器----非web应用在main方法中直接创建<BR>
			      ----应该在web应用被服务器加载时就创建IOC容器<BR>
					在ServletContextListener#contextInitialized(ServletContextEvent sce)方法中创建IOC容器<BR>
			      ----其他组件访问IOC容器：放在ServletContext（即application域）的一个属性中<BR>
			<BR>
2. 简化方法<BR>
	<BR>
	1）web.xml<BR>
		<BR>
		//配置spring配置文件的名称和位置<BR>
		&lt;context-param&gt;<BR>
			&lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;<BR>
			&lt;param-value&gt;classpath:applicationContext.xml&lt;/param-value&gt;<BR>
		&lt;/context-param&gt;<BR>
		<BR>
		//启动IOC容器的servletContextListener<BR>
		&lt;listener&gt;<BR>
			&lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;<BR>
		&lt;/listener&gt;<BR>
		<BR>
	2）index.jsp<BR>
	<BR>
		//1. 从application域对象中得到IOC容器的实例<BR>
		<BR>
			ApplicationContext ctx = WebApplicationContextUtils.getWebApplicationContext(application)<BR>
		<BR>
		//2. 从IOC容器中得到bean<BR>
		<BR>
			Person person = ctx.getBean(Person.class)<BR>
		<BR>
		//3. 使用bean<BR>
		<BR>
			person.hello()<BR>
			<BR>
3. 整合Struts2<BR>
<BR>
	1）整合目标：使IOC容器来管理Structs2的Action<BR>
<BR>
	2）整合过程	
</DD>
</DL>

</DD>
</DL>
</BODY>
</HTML>
